{
  "$meta": {
    "description": "A `coin` object can be obtained by using [get_coin](#BLOCKCHAIN_GET_COIN). The `classID` used for this object is `\"coin\"`."
  },
  "set_cycle_mining": {
    "description": "Assign the hours (game time) that each mining cycle lasts. When a cycle ends, it is decided who gets the reward (1 coin) and the next cycle begins."
  },
  "get_cycle_mining": {
    "description": "Returns a `number` of hours (game time) that each mining cycle lasts. When a cycle ends, it is decided who gets the reward (1 coin) and the next cycle begins."
  },
  "get_reward": {
    "description": "Returns a `number` of coins that will be received as a reward after each mining cycle."
  },
  "set_reward": {
    "description": "Assign the reward that miners will receive after each mining cycle."
  },
  "transaction": {
    "description": "Make a transaction of the currency between the indicated subwallets. In case of error, a `string` with the details is returned."
  },
  "create_subwallet": {
    "description": "Register a new account in the `coin` that can be used to manage services such as stores. It is necessary to use the PIN that the owner of the `wallet` that wants to register has to provide."
  },
  "get_subwallet": {
    "description": "Returns a `subWallet`, in case of error it returns a `string` with the details."
  },
  "get_subwallets": {
    "description": "Returns a `list` where each item is a `subWallet` including all the accounts registered in the cryptocurrency, in case of error it returns a `string` with the details."
  },
  "set_address": {
    "description": "Configure a valid address that will be shown to users who do not have the currency, indicating where to register."
  },
  "get_address": {
    "description": "Returns the configured address that will be shown to users who do not have the currency, indicating where they have to register."
  },
  "get_mined_coins": {
    "description": "Returns a `number` of coins that have been mined so far."
  },
  "reset_password": {
    "description": "Resets the password of the coin. Returns `true` if resetting was successful; otherwise, it will either return a `string` or `null`.",
    "example": [
      "blockchain = include_lib(\"/lib/blockchain.so\")",
      "coin = blockchain.get_coin(\"coinName\", \"user\", \"1234\")",
      "coin.reset_password(\"12345\")"
    ]
  }
}